# version: 0.2

# phases:
#   install:
#     runtime-versions:
#       python: 3.7
#     commands:
#       - echo 'Starting Docker daemon...'
#       - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
#       - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

#       # Remove existing problematic lists and keys
#       - rm -f /etc/apt/sources.list.d/corretto.list
#       - rm -f /etc/apt/sources.list.d/google-chrome.list

#       # Setup Amazon Corretto repository properly
#       - curl -fsSL https://apt.corretto.aws/corretto.key | gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
#       - echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | tee /etc/apt/sources.list.d/corretto.list

#       # Update system and pip
#       - apt-get clean
#       - apt-get update
#       - apt-get install -y jq iputils-ping
#       - python -m pip install --upgrade pip setuptools wheel
#       - pip install --upgrade awscli pytest

#   pre_build:
#     commands:
#       - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
#       - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' simple_jwt_api.yml
#       - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
#       - export KUBECONFIG=$HOME/.kube/config
#       # Install requirements with detailed error output
#       - pip install -r requirements.txt || (echo "Requirements installation failed. Check versions." && pip install -r requirements.txt -v && exit 1)
#       - python -m pytest test_main.py

#   build:
#     commands:
#       - docker build --tag $REPOSITORY_URI:$TAG .

#   post_build:
#     commands:
#       - docker push $REPOSITORY_URI:$TAG
#       - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
#       - kubectl apply -f simple_jwt_api.yml
#       - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

# artifacts:
#   files: build.json

# env:
#   parameter-store:
#     JWT_SECRET: JWT_SECRET


version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo 'Starting Docker daemon...'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

      # Remove existing problematic lists and keys
      - rm -f /etc/apt/sources.list.d/corretto.list
      - rm -f /etc/apt/sources.list.d/google-chrome.list

      # Setup Amazon Corretto repository properly
      - curl -fsSL https://apt.corretto.aws/corretto.key | gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
      - echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | tee /etc/apt/sources.list.d/corretto.list

      # Update system and pip
      - apt-get clean
      - apt-get update
      - apt-get install -y jq iputils-ping
      # Clean pip cache and upgrade pip
      - python -m pip cache purge
      - python -m pip install --upgrade pip setuptools wheel

  pre_build:
    commands:
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' simple_jwt_api.yml
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
      - export KUBECONFIG=$HOME/.kube/config
      # Install requirements with better error handling
      - pip install --no-cache-dir -r requirements.txt
      - python -m pytest test_main.py

  build:
    commands:
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - docker push $REPOSITORY_URI:$TAG
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - kubectl apply -f simple_jwt_api.yml
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files: build.json

env:
  parameter-store:
    JWT_SECRET: JWT_SECRET


